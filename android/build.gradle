buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  // def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['IdChecker_kotlinVersion']
 ext {
        googlePlayServicesVersion = "+" // default: "+"
        firebaseMessagingVersion = "21.1.0"
        buildToolsVersion = "29.0.2"
        minSdkVersion = 29
        compileSdkVersion = 31
        targetSdkVersion = 31
        androidXCore = "1.7.0"
        supportLibVersion = "28.0.0"
  }
  repositories {
      google()
      mavenCentral()
        maven {
            url 'https://dl.google.com/dl/android/maven2'
        }
        jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.3'
    // noinspection DifferentKotlinGradleVersion
    // classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0"
  }
}

allprojects {
  repositories {
   google()
        jcenter()
        maven { url 'https://www.jitpack.io' }
  }
}
def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") &&  rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['IdChecker_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['IdChecker_' + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
      "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {

    implementation fileTree(dir: 'libs', include: [
            'nfc.aar'
    ])

    //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  // From node_modules

  //rxjava
  implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

  implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
  implementation "com.squareup.retrofit2:retrofit:2.6.0"
  implementation "com.squareup.retrofit2:converter-gson:2.6.0"
  implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0"
  implementation "com.squareup.okhttp3:okhttp:4.2.1"
  implementation "com.squareup.okhttp3:logging-interceptor:4.2.1"
  implementation "com.squareup.okhttp3:okhttp-urlconnection:4.2.1"

  // NFC lib

  implementation 'com.android.support:multidex:1.0.3'
  implementation 'org.jmrtd:jmrtd:0.5.5'
  implementation 'net.sf.scuba:scuba-sc-android:0.0.9'
  implementation 'com.madgag.spongycastle:prov:1.54.0.0'
  implementation 'edu.ucar:jj2000:5.2'
  implementation 'com.github.mhshams:jnbis:1.1.0'
  implementation group: 'org.slf4j', name: 'slf4j-android', version: '1.7.28'
  implementation group: 'commons-io', name: 'commons-io', version:'20030203.000550'
  implementation 'com.github.mhshams:jnbis:1.1.0'
  implementation 'com.gemalto.jp2:jp2-android:1.0.3'
  implementation 'com.rmtheis:tess-two:9.0.0'
  implementation 'com.google.code.gson:gson:2.8.7'

  implementation 'androidx.databinding:viewbinding:7.3.1'

    //gif
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.25'
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "IdChecker"
    codegenJavaPackageName = "com.idchecker"
  }
}
